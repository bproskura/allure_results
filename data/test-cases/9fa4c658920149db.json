{"uid":"9fa4c658920149db","name":"Open deal new buy trade request","fullName":"tests.deals.test_deal_actions.TestDealActions#test_open_new_buy_trade_request","historyId":"8383274ee358a5839153a5ca7ad12a34","time":{"start":1726943319691,"stop":1726943327325,"duration":7634},"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_open_new_buy_trade_request\"></span>test_open_new_buy_trade_request</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:21</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <deals.test_deal_actions.TestDealActions object at 0x7f1cd0e85a30>\npage = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cbd9c4860>\n\n    @allure.title(\"Open deal new buy trade request\")\n    def test_open_new_buy_trade_request(self, page: Page, create_session):\n        deal_details_page = DealDetailsPage(page)\n        login_page = LoginPage(page)\n        notifications = Notifications(page)\n        deals_api = DealsApi()\n        failed_message = \"Available balance {}\"\n    \n        with allure.step(\"Test preparation\"):\n            running_deals = deals_api.get_poloniex_running_deals()\n            total_deals = running_deals['total']\n            deal_id = None\n    \n            if total_deals == 0:\n                pytest.skip(\"There are no deals in Running status\")\n    \n            for deal in running_deals['items']:\n                if deal['actions']['trade']:\n                    deal_id = deal['id']\n                    break\n    \n            if deal_id is None:\n                pytest.skip(\"There are no deals with 'trade' action available\")\n    \n            login_page.goto()\n>           create_session()\n\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cbd9c4860>\ndeal       = {'actions': {'cancel': True, 'complete': False, 'restart': False, 'run': False, ...}, 'assessedValue': {'amount': None, 'asset': 'TRX'}, 'assets': {'base': 'STEEM', 'quote': 'TRX'}, 'avgBuyRate': '0', ...}\ndeal_details_page = <src.pages.deal_details_page.deal_details_page.DealDetailsPage object at 0x7f1cc0eb52b0>\ndeal_id    = '6cf9c2e7-00d2-4287-8646-d102301f0f54'\ndeals_api  = <src.api.deals.deals_api.DealsApi object at 0x7f1cc0eb4c20>\nfailed_message = 'Available balance {}'\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f1cc0eb50d0>\nnotifications = <src.pages.notifications.Notifications object at 0x7f1cc0eb4260>\npage       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\nrunning_deals = {'items': [{'actions': {'cancel': False, 'complete': False, 'restart': False, 'run': False, ...}, 'assessedValue': {'a...etadata': {'statistics': {'cancelled': 24, 'completed': 421, 'ready': 776, 'running': 25}}, 'page': 1, 'pages': 2, ...}\nself       = <deals.test_deal_actions.TestDealActions object at 0x7f1cd0e85a30>\ntotal_deals = 19\n\ntests/deals/test_deal_actions.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:135: in _create_session\n    localStorage.setItem('token', '{prepare_user_session(auth_data=auth_data)}');\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        page       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\n        prepare_user_session = <function prepare_user_session at 0x7f1cc712d760>\nmodules/Utils.py:57: in prepare_user_session\n    return res.login(auth_data=auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        res        = <src.api.auth.register_api.AuthApi object at 0x7f1cd0a06d80>\nsrc/api/auth/register_api.py:9: in login\n    response = self.post(Auth.login, auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cd0a06d80>\nsrc/api/base_api.py:42: in post\n    response.raise_for_status()\n        data       = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        endpoint   = 'auth/login'\n        response   = <Response [401]>\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cd0a06d80>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"context","time":{"start":1726943319495,"stop":1726943319655,"duration":160},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1726943319655,"stop":1726943319690,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_session","time":{"start":1726943319691,"stop":1726943319691,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_open_new_buy_trade_request\"></span>test_open_new_buy_trade_request</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:21</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <deals.test_deal_actions.TestDealActions object at 0x7f1cd0e85a30>\npage = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cbd9c4860>\n\n    @allure.title(\"Open deal new buy trade request\")\n    def test_open_new_buy_trade_request(self, page: Page, create_session):\n        deal_details_page = DealDetailsPage(page)\n        login_page = LoginPage(page)\n        notifications = Notifications(page)\n        deals_api = DealsApi()\n        failed_message = \"Available balance {}\"\n    \n        with allure.step(\"Test preparation\"):\n            running_deals = deals_api.get_poloniex_running_deals()\n            total_deals = running_deals['total']\n            deal_id = None\n    \n            if total_deals == 0:\n                pytest.skip(\"There are no deals in Running status\")\n    \n            for deal in running_deals['items']:\n                if deal['actions']['trade']:\n                    deal_id = deal['id']\n                    break\n    \n            if deal_id is None:\n                pytest.skip(\"There are no deals with 'trade' action available\")\n    \n            login_page.goto()\n>           create_session()\n\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cbd9c4860>\ndeal       = {'actions': {'cancel': True, 'complete': False, 'restart': False, 'run': False, ...}, 'assessedValue': {'amount': None, 'asset': 'TRX'}, 'assets': {'base': 'STEEM', 'quote': 'TRX'}, 'avgBuyRate': '0', ...}\ndeal_details_page = <src.pages.deal_details_page.deal_details_page.DealDetailsPage object at 0x7f1cc0eb52b0>\ndeal_id    = '6cf9c2e7-00d2-4287-8646-d102301f0f54'\ndeals_api  = <src.api.deals.deals_api.DealsApi object at 0x7f1cc0eb4c20>\nfailed_message = 'Available balance {}'\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f1cc0eb50d0>\nnotifications = <src.pages.notifications.Notifications object at 0x7f1cc0eb4260>\npage       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\nrunning_deals = {'items': [{'actions': {'cancel': False, 'complete': False, 'restart': False, 'run': False, ...}, 'assessedValue': {'a...etadata': {'statistics': {'cancelled': 24, 'completed': 421, 'ready': 776, 'running': 25}}, 'page': 1, 'pages': 2, ...}\nself       = <deals.test_deal_actions.TestDealActions object at 0x7f1cd0e85a30>\ntotal_deals = 19\n\ntests/deals/test_deal_actions.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:135: in _create_session\n    localStorage.setItem('token', '{prepare_user_session(auth_data=auth_data)}');\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        page       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\n        prepare_user_session = <function prepare_user_session at 0x7f1cc712d760>\nmodules/Utils.py:57: in prepare_user_session\n    return res.login(auth_data=auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        res        = <src.api.auth.register_api.AuthApi object at 0x7f1cd0a06d80>\nsrc/api/auth/register_api.py:9: in login\n    response = self.post(Auth.login, auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cd0a06d80>\nsrc/api/base_api.py:42: in post\n    response.raise_for_status()\n        data       = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        endpoint   = 'auth/login'\n        response   = <Response [401]>\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cd0a06d80>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","steps":[{"name":"Test preparation","time":{"start":1726943321549,"stop":1726943327325,"duration":5776},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n","statusTrace":"  File \"/home/runner/work/qa-website/qa-website/tests/deals/test_deal_actions.py\", line 166, in test_open_new_buy_trade_request\n    create_session()\n  File \"/home/runner/work/qa-website/qa-website/conftest.py\", line 135, in _create_session\n    localStorage.setItem('token', '{prepare_user_session(auth_data=auth_data)}');\n                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-website/qa-website/modules/Utils.py\", line 57, in prepare_user_session\n    return res.login(auth_data=auth_data)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-website/qa-website/src/api/auth/register_api.py\", line 9, in login\n    response = self.post(Auth.login, auth_data)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-website/qa-website/src/api/base_api.py\", line 42, in post\n    response.raise_for_status()\n  File \"/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[{"name":"goto route","time":{"start":1726943323223,"stop":1726943325133,"duration":1910},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"68e32d34586c4a73","name":"Location","source":"68e32d34586c4a73.uri","type":"text/uri-list","size":44},{"uid":"129950041e7ea09d","name":"Screenshot","source":"129950041e7ea09d.png","type":"image/png","size":175928}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"context::0","time":{"start":1726943327507,"stop":1726943327572,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Deal Actions"},{"name":"parentSuite","value":"tests.deals"},{"name":"subSuite","value":"TestDealActions"},{"name":"host","value":"fv-az1764-519"},{"name":"thread","value":"5447-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.deals.test_deal_actions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9fa4c658920149db.json","parameterValues":[]}