{"uid":"3d54c7acf06cd016","name":"Start new deal","fullName":"tests.deals.test_deal_actions.TestDealActions#test_start_deal","historyId":"5e695cec81a7c08859e89f48f53b1601","time":{"start":1726945019571,"stop":1726945020376,"duration":805},"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_start_deal\"></span>test_start_deal</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:54</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <deals.test_deal_actions.TestDealActions object at 0x7f726fd45d90>\npage = <Page url='about:blank'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f72623e4720>\n\n    @allure.title(\"Start new deal\")\n    def test_start_deal(self, page: Page, create_session):\n        deal_details_page = DealDetailsPage(page)\n        login_page = LoginPage(page)\n        notifications = Notifications(page)\n>       deals_api = DealsApi()\n\ncreate_session = <function create_session.<locals>._create_session at 0x7f72623e4720>\ndeal_details_page = <src.pages.deal_details_page.deal_details_page.DealDetailsPage object at 0x7f726231cd40>\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f726231cce0>\nnotifications = <src.pages.notifications.Notifications object at 0x7f726231e090>\npage       = <Page url='about:blank'>\nself       = <deals.test_deal_actions.TestDealActions object at 0x7f726fd45d90>\n\ntests/deals/test_deal_actions.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/api/base_api.py:22: in __init__\n    self._login(auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        jwt_token  = None\n        lang       = 'en'\n        self       = <src.api.deals.deals_api.DealsApi object at 0x7f726231e540>\nsrc/api/base_api.py:30: in _login\n    raise e\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.deals.deals_api.DealsApi object at 0x7f726231e540>\nsrc/api/base_api.py:27: in _login\n    response.raise_for_status()\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.deals.deals_api.DealsApi object at 0x7f726231e540>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"context","time":{"start":1726945019380,"stop":1726945019535,"duration":155},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1726945019535,"stop":1726945019570,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_session","time":{"start":1726945019570,"stop":1726945019570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_start_deal\"></span>test_start_deal</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:54</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <deals.test_deal_actions.TestDealActions object at 0x7f726fd45d90>\npage = <Page url='about:blank'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f72623e4720>\n\n    @allure.title(\"Start new deal\")\n    def test_start_deal(self, page: Page, create_session):\n        deal_details_page = DealDetailsPage(page)\n        login_page = LoginPage(page)\n        notifications = Notifications(page)\n>       deals_api = DealsApi()\n\ncreate_session = <function create_session.<locals>._create_session at 0x7f72623e4720>\ndeal_details_page = <src.pages.deal_details_page.deal_details_page.DealDetailsPage object at 0x7f726231cd40>\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f726231cce0>\nnotifications = <src.pages.notifications.Notifications object at 0x7f726231e090>\npage       = <Page url='about:blank'>\nself       = <deals.test_deal_actions.TestDealActions object at 0x7f726fd45d90>\n\ntests/deals/test_deal_actions.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/api/base_api.py:22: in __init__\n    self._login(auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        jwt_token  = None\n        lang       = 'en'\n        self       = <src.api.deals.deals_api.DealsApi object at 0x7f726231e540>\nsrc/api/base_api.py:30: in _login\n    raise e\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.deals.deals_api.DealsApi object at 0x7f726231e540>\nsrc/api/base_api.py:27: in _login\n    response.raise_for_status()\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.deals.deals_api.DealsApi object at 0x7f726231e540>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","steps":[],"attachments":[{"uid":"f7f9b6911f3688c8","name":"Location","source":"f7f9b6911f3688c8.uri","type":"text/uri-list","size":11},{"uid":"614f8d97cb03ee4","name":"Screenshot","source":"614f8d97cb03ee4.png","type":"image/png","size":6158},{"uid":"b2b799eaca662f09","name":"log","source":"b2b799eaca662f09.txt","type":"text/plain","size":467}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true},"afterStages":[{"name":"context::0","time":{"start":1726945020462,"stop":1726945020509,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Deal Actions"},{"name":"parentSuite","value":"tests.deals"},{"name":"subSuite","value":"TestDealActions"},{"name":"host","value":"fv-az1521-508"},{"name":"thread","value":"5413-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.deals.test_deal_actions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"66a986eb20ef1ca","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","time":{"start":1726945018578,"stop":1726945019231,"duration":653}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":3},"items":[{"uid":"cb7f5d2860624148","reportUrl":"https://darkbot-io.github.io/qa-website/531//#testresult/cb7f5d2860624148","status":"failed","statusDetails":"AssertionError: assert 'Available balance 1.701' in 'Available balance 1.6908126700 TRX is not enough to open buy order on market LINK-TRX with amount 2 TRX and quantity 0.0276128675963 LINK'\n +  where 'Available balance 1.701' = <built-in method format of str object at 0x7f1cd0f60170>('1.701')\n +    where <built-in method format of str object at 0x7f1cd0f60170> = 'Available balance {}'.format\n +  and   'Available balance 1.6908126700 TRX is not enough to open buy order on market LINK-TRX with amount 2 TRX and quantity 0.0276128675963 LINK' = get_unsuccessful_toast_message()\n +    where get_unsuccessful_toast_message = <src.pages.notifications.Notifications object at 0x7f1cbd9e5310>.get_unsuccessful_toast_message","time":{"start":1726943274315,"stop":1726943294352,"duration":20037}},{"uid":"879df8dac18f330c","reportUrl":"https://darkbot-io.github.io/qa-website/529//#testresult/879df8dac18f330c","status":"passed","time":{"start":1726772706324,"stop":1726772727547,"duration":21223}}]},"tags":[]},"source":"3d54c7acf06cd016.json","parameterValues":[]}