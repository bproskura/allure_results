{"uid":"c784abf56c3fe055","name":"test_load_pages_with_title[user/profile-Profile settings-//h2]","fullName":"tests.performance.test_load_page.TestLoadPage#test_load_pages_with_title","historyId":"703577e47e854bcb1d359ebeff438258","time":{"start":1726943367347,"stop":1726943370063,"duration":2716},"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_load_pages_with_title[user/profile-Profile settings-//h2]\"></span>test_load_pages_with_title[user/profile-Profile settings-//h2]</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:21</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <performance.test_load_page.TestLoadPage object at 0x7f1cd0e86d20>\npage = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cc0f23a60>\nslug = 'user/profile', title = 'Profile settings', loc = '//h2'\n\n    @pytest.mark.parametrize(**PagesParams.ddt_page_with_title_slug)\n    def test_load_pages_with_title(self, page: Page, create_session, slug, title, loc):\n        login_page = LoginPage(page)\n        dashboard_page = DashboardPage(page)\n    \n        with allure.step(\"Test preparation\"):\n            login_page.goto()\n>           create_session()\n\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cc0f23a60>\ndashboard_page = <src.pages.dashboard_page.dashboard_page.DashboardPage object at 0x7f1cbd906060>\nloc        = '//h2'\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f1cbd904470>\npage       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\nself       = <performance.test_load_page.TestLoadPage object at 0x7f1cd0e86d20>\nslug       = 'user/profile'\ntitle      = 'Profile settings'\n\ntests/performance/test_load_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:135: in _create_session\n    localStorage.setItem('token', '{prepare_user_session(auth_data=auth_data)}');\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        page       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\n        prepare_user_session = <function prepare_user_session at 0x7f1cc712d760>\nmodules/Utils.py:56: in prepare_user_session\n    res = AuthApi(auth_data=auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\nsrc/api/base_api.py:22: in __init__\n    self._login(auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        jwt_token  = None\n        lang       = 'en'\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cbd994050>\nsrc/api/base_api.py:30: in _login\n    raise e\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cbd994050>\nsrc/api/base_api.py:27: in _login\n    response.raise_for_status()\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cbd994050>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"context","time":{"start":1726943367144,"stop":1726943367300,"duration":156},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1726943367301,"stop":1726943367346,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_session","time":{"start":1726943367346,"stop":1726943367346,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_load_pages_with_title[user/profile-Profile settings-//h2]\"></span>test_load_pages_with_title[user/profile-Profile settings-//h2]</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:21</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <performance.test_load_page.TestLoadPage object at 0x7f1cd0e86d20>\npage = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cc0f23a60>\nslug = 'user/profile', title = 'Profile settings', loc = '//h2'\n\n    @pytest.mark.parametrize(**PagesParams.ddt_page_with_title_slug)\n    def test_load_pages_with_title(self, page: Page, create_session, slug, title, loc):\n        login_page = LoginPage(page)\n        dashboard_page = DashboardPage(page)\n    \n        with allure.step(\"Test preparation\"):\n            login_page.goto()\n>           create_session()\n\ncreate_session = <function create_session.<locals>._create_session at 0x7f1cc0f23a60>\ndashboard_page = <src.pages.dashboard_page.dashboard_page.DashboardPage object at 0x7f1cbd906060>\nloc        = '//h2'\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f1cbd904470>\npage       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\nself       = <performance.test_load_page.TestLoadPage object at 0x7f1cd0e86d20>\nslug       = 'user/profile'\ntitle      = 'Profile settings'\n\ntests/performance/test_load_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:135: in _create_session\n    localStorage.setItem('token', '{prepare_user_session(auth_data=auth_data)}');\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        page       = <Page url='https://darkbot:98713456@dev.app.darkbot.io/'>\n        prepare_user_session = <function prepare_user_session at 0x7f1cc712d760>\nmodules/Utils.py:56: in prepare_user_session\n    res = AuthApi(auth_data=auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\nsrc/api/base_api.py:22: in __init__\n    self._login(auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        jwt_token  = None\n        lang       = 'en'\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cbd994050>\nsrc/api/base_api.py:30: in _login\n    raise e\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cbd994050>\nsrc/api/base_api.py:27: in _login\n    response.raise_for_status()\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.auth.register_api.AuthApi object at 0x7f1cbd994050>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","steps":[{"name":"Test preparation","time":{"start":1726943367347,"stop":1726943370062,"duration":2715},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n","statusTrace":"  File \"/home/runner/work/qa-website/qa-website/tests/performance/test_load_page.py\", line 19, in test_load_pages_with_title\n    create_session()\n  File \"/home/runner/work/qa-website/qa-website/conftest.py\", line 135, in _create_session\n    localStorage.setItem('token', '{prepare_user_session(auth_data=auth_data)}');\n                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-website/qa-website/modules/Utils.py\", line 56, in prepare_user_session\n    res = AuthApi(auth_data=auth_data)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-website/qa-website/src/api/base_api.py\", line 22, in __init__\n    self._login(auth_data)\n  File \"/home/runner/work/qa-website/qa-website/src/api/base_api.py\", line 30, in _login\n    raise e\n  File \"/home/runner/work/qa-website/qa-website/src/api/base_api.py\", line 27, in _login\n    response.raise_for_status()\n  File \"/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[{"name":"goto route","time":{"start":1726943367347,"stop":1726943369239,"duration":1892},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"f061d5c7b42f84b8","name":"Location","source":"f061d5c7b42f84b8.uri","type":"text/uri-list","size":44},{"uid":"2c103323175baad6","name":"Screenshot","source":"2c103323175baad6.png","type":"image/png","size":175928}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"context::0","time":{"start":1726943370225,"stop":1726943370288,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Pages load"},{"name":"parentSuite","value":"tests.performance"},{"name":"subSuite","value":"TestLoadPage"},{"name":"host","value":"fv-az1764-519"},{"name":"thread","value":"5447-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.performance.test_load_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"loc","value":"'//h2'"},{"name":"slug","value":"'user/profile'"},{"name":"title","value":"'Profile settings'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"841cffc25ec23e9f","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","time":{"start":1726943364147,"stop":1726943366901,"duration":2754}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"6b592fbe506f394e","reportUrl":"https://darkbot-io.github.io/qa-website/529//#testresult/6b592fbe506f394e","status":"passed","time":{"start":1726772877748,"stop":1726772893933,"duration":16185}},{"uid":"d065f2f183ebbcaa","reportUrl":"https://darkbot-io.github.io/qa-website/528//#testresult/d065f2f183ebbcaa","status":"passed","time":{"start":1726334490204,"stop":1726334507784,"duration":17580}},{"uid":"13a43f17b5f4e053","reportUrl":"https://darkbot-io.github.io/qa-website/527//#testresult/13a43f17b5f4e053","status":"passed","time":{"start":1725729652101,"stop":1725729667339,"duration":15238}}]},"tags":[]},"source":"c784abf56c3fe055.json","parameterValues":["'//h2'","'user/profile'","'Profile settings'"]}