{"uid":"42fba4c4b6bab03","name":"Run new backtest","fullName":"tests.backtests.test_create_backtest.TestCreateBacktest#test_run_new_backtest","historyId":"1556581400a8dd5a5b634c33b5479a1e","time":{"start":1726944941454,"stop":1726944942153,"duration":699},"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_run_new_backtest\"></span>test_run_new_backtest</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:54</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <backtests.test_create_backtest.TestCreateBacktest object at 0x7f726fc9e210>\npage = <Page url='about:blank'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f726d866f20>\n\n    @allure.title(\"Run new backtest\")\n    def test_run_new_backtest(self, page: Page, create_session):\n        login_page = LoginPage(page)\n        bot_details_page = BotDetailsPage(page)\n        bots_page = BotsPage(page)\n        backtest_page = BacktestPage(page)\n        notifications = Notifications(page)\n>       bots_api = BotsApi()\n\nbacktest_page = <src.pages.backtest_page.backtest_page.BacktestPage object at 0x7f726fc11eb0>\nbot_details_page = <src.pages.bot_details_page.bot_details_page.BotDetailsPage object at 0x7f726fc104d0>\nbots_page  = <src.pages.bots_page.bots_page.BotsPage object at 0x7f726fc12390>\ncreate_session = <function create_session.<locals>._create_session at 0x7f726d866f20>\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f726fc11640>\nnotifications = <src.pages.notifications.Notifications object at 0x7f726ec2e360>\npage       = <Page url='about:blank'>\nself       = <backtests.test_create_backtest.TestCreateBacktest object at 0x7f726fc9e210>\n\ntests/backtests/test_create_backtest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/api/base_api.py:22: in __init__\n    self._login(auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        jwt_token  = None\n        lang       = 'en'\n        self       = <src.api.bots.bots_api.BotsApi object at 0x7f726fc11910>\nsrc/api/base_api.py:30: in _login\n    raise e\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.bots.bots_api.BotsApi object at 0x7f726fc11910>\nsrc/api/base_api.py:27: in _login\n    response.raise_for_status()\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.bots.bots_api.BotsApi object at 0x7f726fc11910>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"context","time":{"start":1726944941171,"stop":1726944941378,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1726944941378,"stop":1726944941451,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_session","time":{"start":1726944941451,"stop":1726944941451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"descriptionHtml":"<h4 style=\"margin: -10px 0 5px;\"><span style=\"margin: 9px 4px 9px 0; cursor: pointer\" class=\"fa fa-files-o\" data-copy=\"test_run_new_backtest\"></span>test_run_new_backtest</h4>\n    Collected at <span class=\"label label_status_passed\">2024-09-21 18:54</span><br><br>","status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login","statusTrace":"self = <backtests.test_create_backtest.TestCreateBacktest object at 0x7f726fc9e210>\npage = <Page url='about:blank'>\ncreate_session = <function create_session.<locals>._create_session at 0x7f726d866f20>\n\n    @allure.title(\"Run new backtest\")\n    def test_run_new_backtest(self, page: Page, create_session):\n        login_page = LoginPage(page)\n        bot_details_page = BotDetailsPage(page)\n        bots_page = BotsPage(page)\n        backtest_page = BacktestPage(page)\n        notifications = Notifications(page)\n>       bots_api = BotsApi()\n\nbacktest_page = <src.pages.backtest_page.backtest_page.BacktestPage object at 0x7f726fc11eb0>\nbot_details_page = <src.pages.bot_details_page.bot_details_page.BotDetailsPage object at 0x7f726fc104d0>\nbots_page  = <src.pages.bots_page.bots_page.BotsPage object at 0x7f726fc12390>\ncreate_session = <function create_session.<locals>._create_session at 0x7f726d866f20>\nlogin_page = <src.pages.login_page.login_page.LoginPage object at 0x7f726fc11640>\nnotifications = <src.pages.notifications.Notifications object at 0x7f726ec2e360>\npage       = <Page url='about:blank'>\nself       = <backtests.test_create_backtest.TestCreateBacktest object at 0x7f726fc9e210>\n\ntests/backtests/test_create_backtest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/api/base_api.py:22: in __init__\n    self._login(auth_data)\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        jwt_token  = None\n        lang       = 'en'\n        self       = <src.api.bots.bots_api.BotsApi object at 0x7f726fc11910>\nsrc/api/base_api.py:30: in _login\n    raise e\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.bots.bots_api.BotsApi object at 0x7f726fc11910>\nsrc/api/base_api.py:27: in _login\n    response.raise_for_status()\n        auth_data  = {'password': 'darkbot123', 'token': 'token', 'username': 'premium@darkbot.io'}\n        response   = <Response [401]>\n        self       = <src.api.bots.bots_api.BotsApi object at 0x7f726fc11910>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login\n\nhttp_error_msg = '401 Client Error: Unauthorized for url: https://dev.api.darkbot.io/auth/login'\nreason     = 'Unauthorized'\nself       = <Response [401]>\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError","steps":[],"attachments":[{"uid":"2f35c7d573abafb9","name":"Location","source":"2f35c7d573abafb9.uri","type":"text/uri-list","size":11},{"uid":"a014f8f27dccb45d","name":"Screenshot","source":"a014f8f27dccb45d.png","type":"image/png","size":6158},{"uid":"55a52e9ce7b505b3","name":"log","source":"55a52e9ce7b505b3.txt","type":"text/plain","size":233}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true},"afterStages":[{"name":"context::0","time":{"start":1726944942251,"stop":1726944942299,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Create backtest"},{"name":"parentSuite","value":"tests.backtests"},{"name":"subSuite","value":"TestCreateBacktest"},{"name":"host","value":"fv-az1521-508"},{"name":"thread","value":"5413-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backtests.test_create_backtest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"42fba4c4b6bab03.json","parameterValues":[]}